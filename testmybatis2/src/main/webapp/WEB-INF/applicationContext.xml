<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.1.xsd
           http://www.springframework.org/schema/util 
           http://www.springframework.org/schema/util/spring-util-3.1.xsd 
           http://www.springframework.org/schema/tx   
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <!-- 启动注解 -->
    <context:annotation-config />
    <context:component-scan base-package="com.campus">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" /> 
    </context:component-scan>

    <util:properties id="props" location="/WEB-INF/config.properties" />
    <util:properties id="redisProps" location="/WEB-INF/redis.properties"/>
    
    <bean id="mysqlDataSource" class="com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean" init-method="init" destroy-method="close">
        <property name="uniqueResourceName"><value>MysqlNonXADataSource</value></property>
        <property name="user"><value>#{props['jdbc.user']}</value></property>
        <property name="password"><value>#{props['jdbc.pwd']}</value></property>
        <property name="url"><value>#{props['jdbc.url']}</value></property>
        <property name="driverClassName"><value>#{props['jdbc.driver']}</value></property>
        <property name="minPoolSize"><value>1</value></property>
        <property name="maxPoolSize"><value>2</value></property>
        
         <!--最大获取数据时间，如果不设置这个值，Atomikos使用默认的5分钟，那么在处理大批量数据读取的时候，一旦超过5分钟，就会抛出类似 Resultset is close 的错误.-->
        <property name="reapTimeout"><value>20000</value></property>
        
        <!--获取连接失败重新获等待最大时间，在这个时间内如果有可用连接，将返回-->
        <property name="borrowConnectionTimeout"><value>30</value></property>
        <property name="testQuery"><value>select 1</value></property>
        
        <!--最大闲置时间，超过最小连接池连接的连接将将关闭-->
        <property name="maxIdleTime"><value>60</value></property>
        
        <!--java数据库连接池，最大可等待获取datasouce的时间-->
        <property name="loginTimeout"><value>0</value></property>
        
        <!--连接回收时间-->
        <property name="maintenanceInterval"><value>60</value></property>
        
        <!--连接最大存活时间，超过这个且没有正在使用的连接将自动销毁,0无限制，1000 =1000s,对于一些会自动中断连接的数据库如mysql，可以设置这个参数，在达到这个时间的时候会自动关闭连接，下次数据库调用的时候就会新建-->
        <property name="maxLifetime"><value>60</value></property>
        
    </bean> 

	<!-- 配置SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory1" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="mysqlDataSource"/>
        <property name="mapperLocations">
            <list>
                <value>classpath:com/campus/news/map/*Mapper.xml</value>
                <value>classpath:com/campus/common/map/*Mapper.xml</value>
            </list>
        </property>
        <property name="typeAliasesPackage" value="com.campus.news.dao"></property>
    </bean>
    
    <bean id="atomikosTransactionManager"  
        class="com.atomikos.icatch.jta.UserTransactionManager"  
        init-method="init" destroy-method="close">  
        <property name="forceShutdown">  
            <value>true</value>  
        </property>  
    </bean>  
    <bean id="atomikosUserTransaction"  
        class="com.atomikos.icatch.jta.UserTransactionImp">  
        <property name="transactionTimeout" value="20000" />  
    </bean>  
    <bean id="transactionManager"  
        class="org.springframework.transaction.jta.JtaTransactionManager">  
        <property name="transactionManager">  
            <ref bean="atomikosTransactionManager" />  
        </property>  
        <property name="userTransaction">  
            <ref bean="atomikosUserTransaction" />  
        </property>  
    </bean> 
    
    <!--  配置spring的事物管理 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    
    <context:component-scan annotation-config="false" base-package="com.campus.*.service" resource-pattern="*.class">  
        <!-- 这样可以减少扫描处理量 -->  
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>  
    </context:component-scan> 

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.campus.*.dao"/>
        <property name="markerInterface" value="com.campus.dao.util.MapperMarker"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactory1"></property>
    </bean>
    
    <!-- 设置redis连接池配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="#{redisProps['redis.pool.maxIdle']}" />  
        <property name="testOnBorrow" value="#{redisProps['redis.pool.testOnBorrow']}" />
	</bean>
	<!-- 配置redis主服务 -->
	<bean id="jedisCluster" class="redis.clients.jedis.JedisCluster" name="jedisCluster">
	    <constructor-arg index="0">
	        <set>
	            <bean class="redis.clients.jedis.HostAndPort">  
                    <constructor-arg index="0" value="#{redisProps['redis.ip']}" />  
                    <constructor-arg index="1" type="int" value="#{redisProps['redis.port']}" />  
                </bean>
	        </set>
	    </constructor-arg>
	    <constructor-arg index="1" ref="jedisPoolConfig"/>
	</bean>
	
	 <!-- 配置httpclient -->
    <bean id="httpClient" class="org.apache.http.impl.client.DefaultHttpClient">
        <constructor-arg>
            <bean class="org.apache.http.impl.conn.PoolingClientConnectionManager"/>
        </constructor-arg>
    </bean> 
	
</beans>